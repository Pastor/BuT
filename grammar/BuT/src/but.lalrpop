use lalrpop_util::ParseError;
use super::ast::*;
use super::lexer::{Token, LexicalError};
use lalrpop_util::ErrorRecovery;
grammar<'input, 'err>(input: &'input str, file_no: usize , parser_errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, LexicalError>> );

pub SourceUnit: SourceUnit = {
    SourceUnitPart* => SourceUnit(<>)
}

SourceUnitPart: SourceUnitPart = {
    ImportDirective => <>,
    EnumDefinition => SourceUnitPart::EnumDefinition(<>),
    StructDefinition => SourceUnitPart::StructDefinition(<>),
    TypeDefinition => SourceUnitPart::TypeDefinition(<>),
    VariableDefinition => SourceUnitPart::VariableDefinition(<>),
}

ImportPath: ImportPath = {
    StringLiteral => ImportPath::Filename(<>),
    ButIdentifierPath => ImportPath::Path(<>),
}

ImportDirective: SourceUnitPart = {
    <l:@L> "import" <s:ImportPath> <r:@R> ";" => SourceUnitPart::ImportDirective(Import::Plain(s, Loc::Source(file_no, l, r))),
    <l:@L> "import" <s:ImportPath> "as" <id:ButIdentifier> <r:@R> ";" => SourceUnitPart::ImportDirective(Import::GlobalSymbol(s, id, Loc::Source(file_no, l, r))),
    <l:@L> "import" "*" "as" <id:ButIdentifier> <from:ButIdentifier> <s:ImportPath> <r:@R> ";" => {
        if from.name != "from" {
            let error = ErrorRecovery {
                error: ParseError::User {
                    error: LexicalError::ExpectedFrom(from.loc, from.name)
                },
                dropped_tokens: Vec::new(),
            };
            parser_errors.push(error);
        }
        SourceUnitPart::ImportDirective(Import::GlobalSymbol(s, id, Loc::Source(file_no, l, r)))
    },
    <l:@L> "import" "{" <rename:CommaOne<ImportRename>> "}" <from:ButIdentifier> <s:ImportPath> <r:@R> ";" =>? {
        if from.name != "from" {
            let error = ErrorRecovery {
                error: ParseError::User {
                    error: LexicalError::ExpectedFrom(from.loc, from.name),
                },
                dropped_tokens: Vec::new(),
            };
            parser_errors.push(error);
        }
        Ok(SourceUnitPart::ImportDirective(Import::Rename(s,rename,Loc::Source(file_no, l, r))))
    },
}

ImportRename: (Identifier, Option<Identifier>) = {
    <ButIdentifier> => (<>, None),
    <from:ButIdentifier> "as" <to:ButIdentifier> => (from, Some(to)),
}

EnumDefinition: Box<EnumDefinition> = {
    <l:@L> "enum" <name:ButIdentifierOrError> "{" <values:Comma<ButIdentifierOrError>> "}" <r:@R> => {
        Box::new(EnumDefinition{loc: Loc::Source(file_no, l, r), name, values})
    }
}

ButIdentifierPath: IdentifierPath = {
    <l:@L> <e:ButIdentifier> <v:("." <ButIdentifier>)*> <r:@R> => {
        let mut v = v;
        v.insert(0, e);
        IdentifierPath { loc: Loc::Source(file_no, l, r), identifiers: v }
    }
}

Identifier: Identifier = {
    <l:@L> <n:identifier> <r:@R> => Identifier{loc: Loc::Source(file_no, l, r), name: n.to_string()}
}

ButIdentifier: Identifier = {
    <l:@L> <n:identifier> <r:@R> => Identifier{loc: Loc::Source(file_no, l, r), name: n.to_string()},
}

ButIdentifierOrError: Option<Identifier> = {
    ButIdentifier => Some(<>),
    ! => {
        parser_errors.push(<>);
        None
    }
}

VariableDeclaration: VariableDeclaration = {
    <l:@L> <name:ButIdentifierOrError> <r:@R> => VariableDeclaration {
        loc: Loc::Source(file_no, l, r), ty: None, storage: None, name: name
    },
}

VariableDefinition: Box<VariableDefinition> = {
    <l:@L> <attrs:VariableAttribute*> <name:ButIdentifierOrError>  <ty:(":" <Type>)?> <e:("=" <Expression>)?> <r:@R> ";" => {
        Box::new(VariableDefinition{
            loc: Loc::Source(file_no, l, r), ty, attrs, name, initializer: e,
        })
    },
}

Visibility: Visibility = {
    <l:@L> "external" <r:@R> => Visibility::External(Some(Loc::Source(file_no, l, r))),
}

VariableAttribute: VariableAttribute = {
    Visibility => VariableAttribute::Visibility(<>),
    <l:@L> "const" <r:@R> => VariableAttribute::Constant(Loc::Source(file_no, l, r)),
    <l:@L> "let" <r:@R> => VariableAttribute::Readable(Loc::Source(file_no, l, r)),
    <l:@L> "mut" <r:@R> => VariableAttribute::Writable(Loc::Source(file_no, l, r)),
    <l:@L> "pio" <r:@R> => VariableAttribute::Portable(Loc::Source(file_no, l, r)),
}

StructDefinition: Box<StructDefinition> = {
    <l:@L> "struct" <name:ButIdentifierOrError> "{" <fields:(<VariableDeclaration> ";")*> "}" <r:@R> => {
        Box::new(StructDefinition{loc: Loc::Source(file_no, l, r), name, fields})
    }
}

TypeDefinition: Box<TypeDefinition> = {
    <l:@L> "type" <name:ButIdentifier> "=" <ty:Type> <r:@R> ";" => {
        Box::new(TypeDefinition{
            loc: Loc::Source(file_no, l, r), name, ty
        })
    },
}

Type: Type = {
    <name:ButIdentifier> => Type::Alias(name),
    <l:@L> "[" <n:number> ":" <ty:Type> "]" <r:@R> => {
        Type::Array {
            loc: Loc::Source(file_no, l, r),
            element_count: n as u16,
            element_type: Box::new(ty)
        }
    }
}

Expression: Expression = {
    Precedence1
}

Precedence1: Expression = {
    <l:@L> <n:number> <bit:(":" <number>)?> <r:@R> => {
        let bit = if let Some(bit) = bit {
            Some(bit)
        } else {
            None
        };

        if let Some(bit) = bit {
            Expression::AddressLiteral(Loc::Source(file_no, l, r), n, bit)
        } else {
            Expression::NumberLiteral(Loc::Source(file_no, l, r), n)
        }
    },
    <l:@L> <n:rational> <r:@R> => {
        Expression::RationalNumberLiteral(Loc::Source(file_no, l, r), n.to_string())
    },
    <l:@L> <n:hexnumber> <r:@R> => {
        Expression::HexNumberLiteral(Loc::Source(file_no, l, r), n.to_owned(), None)
    },
    <l:@L> "{" <v:CommaOne<Expression>> "}" <r:@R> => {
        Expression::Initializer(Loc::Source(file_no, l, r), v)
    },
    Precedence0
}

Precedence0: Expression = {
    LiteralExpression
}

LiteralExpression: Expression = {
    <a:@L> "true" <b:@R> => Expression::BoolLiteral(Loc::Source(file_no, a, b), true),
    <a:@L> "false" <b:@R> => Expression::BoolLiteral(Loc::Source(file_no, a, b), false),
    <StringLiteral+> => Expression::StringLiteral(<>),
    <HexLiteral+> => Expression::HexLiteral(<>),
}

StringLiteral: StringLiteral = {
    <l:@L> <s:string> <r:@R> => {
        StringLiteral{ loc: Loc::Source(file_no, l, r), unicode: s.0, string: s.1.to_string() }
    }
}

HexLiteral: HexLiteral = {
    <l:@L> <s:hexstring> <r:@R> => {
        let v = s.to_string();
        let hex_len = v.len() - 5;

        HexLiteral{ loc: Loc::Source(file_no, l, r), hex: v.chars().skip(4).filter(|c| *c != '_' && *c != '"' && *c != '\'').collect() }
    }
}


Comma<T>: Vec<T> = {
    => Vec::new(),
    CommaOne<T> => <>,
};

CommaOne<T>: Vec<T> = {
    <e:T> <v:("," <T>)*> => {
        let mut v = v;
        v.insert(0, e);
        v
    }
};

CommaTwo<T>: Vec<T> = {
    <e:T> <v:("," <T>)+> => {
        let mut v = v;
        v.insert(0, e);
        v
    }
};

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token<'input> {
        identifier => Token::Identifier(<&'input str>),
        annotation => Token::Annotation(<&'input str>),
        string => Token::StringLiteral(<bool>, <&'input str>),
        address => Token::AddressLiteral(<&'input str>),
        hexstring => Token::HexLiteral(<&'input str>),
        number => Token::Number(<i64>),
        rational => Token::RationalNumber(<&'input str>),
        hexnumber => Token::HexNumber(<&'input str>),
        ";" => Token::Semicolon,
        ":" => Token::Colon,
        "{" => Token::OpenCurlyBrace,
        "}" => Token::CloseCurlyBrace,
        "(" => Token::OpenParenthesis,
        ")" => Token::CloseParenthesis,
        "=" => Token::Assign,
        "==" => Token::Equal,
        "|=" => Token::BitwiseOrAssign,
        "&=" => Token::BitwiseAndAssign,
        "<<=" => Token::ShiftLeftAssign,
        ">>=" => Token::ShiftRightAssign,
        "+=" => Token::AddAssign,
        "-=" => Token::SubtractAssign,
        "*=" => Token::MulAssign,
        "/=" => Token::DivideAssign,
        "%=" => Token::ModuloAssign,
        "||" => Token::Or,
        "&&" => Token::And,
        "!=" => Token::NotEqual,
        "<" => Token::Less,
        "<=" => Token::LessEqual,
        ">" => Token::More,
        ">=" => Token::MoreEqual,
        "|" => Token::BitwiseOr,
        "&" => Token::BitwiseAnd,
        "<<" => Token::ShiftLeft,
        ">>" => Token::ShiftRight,
        "+" => Token::Add,
        "-" => Token::Subtract,
        "*" => Token::Mul,
        "/" => Token::Divide,
        "%" => Token::Modulo,
        "**" => Token::Power,
        "!" => Token::Not,
        "++" => Token::Increment,
        "--" => Token::Decrement,
        "[" => Token::OpenBracket,
        "]" => Token::CloseBracket,
        "." => Token::Member,
        "," => Token::Comma,
        "struct" => Token::Struct,
        "import" => Token::Import,
        "interface" => Token::Interface,
        "library" => Token::Library,
        "enum" => Token::Enum,
        "type" => Token::Type,
        "const" => Token::Constant,
        "let" => Token::Readable,
        "mut" => Token::Writable,
        "pio" => Token::Portable,
        "external" => Token::External,
        "true" => Token::True,
        "false" => Token::False,
        "fn" => Token::Function,
        "return" => Token::Return,
        "if" => Token::If,
        "for" => Token::For,
        "while" => Token::While,
        "else" => Token::Else,
        "do" => Token::Do,
        "continue" => Token::Continue,
        "break" => Token::Break,
        "emit" => Token::Emit,
        "as" => Token::As,
        "is" => Token::Is,
        "assembly" => Token::Assembly,
    }
}
