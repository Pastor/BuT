use lalrpop_util::ParseError;
use super::ast::*;
use super::lexer::{Token, LexicalError};
use lalrpop_util::ErrorRecovery;
grammar<'input, 'err>(input: &'input str, file_no: usize , parser_errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, LexicalError>> );

pub SourceUnit: SourceUnit = {
    SourceUnitPart* => SourceUnit(<>)
}

SourceUnitPart: SourceUnitPart = {
    ImportDirective => <>,
    EnumDefinition => SourceUnitPart::EnumDefinition(<>),
    StructDefinition => SourceUnitPart::StructDefinition(<>),
    TypeDefinition => SourceUnitPart::TypeDefinition(<>),
    VariableDefinition => SourceUnitPart::VariableDefinition(<>),
    GlobalAnnotationDefinition => SourceUnitPart::AnnotationDefinition(Box::new(<>)),
    PropertyDefinition => SourceUnitPart::PropertyDefinition(Box::new(<>)),
    FunctionDefinition => SourceUnitPart::FunctionDefinition(<>),
    <l:@L> ";" <r:@R> => SourceUnitPart::StraySemicolon(Loc::Source(file_no, l, r)),
}

ImportPath: ImportPath = {
    StringLiteral => ImportPath::Filename(<>),
    ButIdentifierPath => ImportPath::Path(<>),
}

ImportDirective: SourceUnitPart = {
    <l:@L> "import" <s:ImportPath> <r:@R> ";" => SourceUnitPart::ImportDirective(Import::Plain(s, Loc::Source(file_no, l, r))),
    <l:@L> "import" <s:ImportPath> "as" <id:ButIdentifier> <r:@R> ";" => SourceUnitPart::ImportDirective(Import::GlobalSymbol(s, id, Loc::Source(file_no, l, r))),
    <l:@L> "import" "*" "as" <id:ButIdentifier> <from:ButIdentifier> <s:ImportPath> <r:@R> ";" => {
        if from.name != "from" {
            let error = ErrorRecovery {
                error: ParseError::User {
                    error: LexicalError::ExpectedFrom(from.loc, from.name)
                },
                dropped_tokens: Vec::new(),
            };
            parser_errors.push(error);
        }
        SourceUnitPart::ImportDirective(Import::GlobalSymbol(s, id, Loc::Source(file_no, l, r)))
    },
    <l:@L> "import" "{" <rename:CommaOne<ImportRename>> "}" <from:ButIdentifier> <s:ImportPath> <r:@R> ";" =>? {
        if from.name != "from" {
            let error = ErrorRecovery {
                error: ParseError::User {
                    error: LexicalError::ExpectedFrom(from.loc, from.name),
                },
                dropped_tokens: Vec::new(),
            };
            parser_errors.push(error);
        }
        Ok(SourceUnitPart::ImportDirective(Import::Rename(s,rename,Loc::Source(file_no, l, r))))
    },
}

ImportRename: (Identifier, Option<Identifier>) = {
    <ButIdentifier> => (<>, None),
    <from:ButIdentifier> "as" <to:ButIdentifier> => (from, Some(to)),
}

EnumDefinition: Box<EnumDefinition> = {
    <l:@L> <annotations:AnnotationDefinition*> "enum" <name:ButIdentifierOrError> "{" <values:Comma<ButIdentifierOrError>> "}" <r:@R> => {
        Box::new(EnumDefinition{loc: Loc::Source(file_no, l, r), name, values, annotations})
    }
}

ButIdentifierPath: IdentifierPath = {
    <l:@L> <e:ButIdentifier> <v:(":" ":" <ButIdentifier>)*> <r:@R> => {
        let mut v = v;
        v.insert(0, e);
        IdentifierPath { loc: Loc::Source(file_no, l, r), identifiers: v }
    }
}

Identifier: Identifier = {
    <l:@L> <n:identifier> <r:@R> => Identifier{loc: Loc::Source(file_no, l, r), name: n.to_string()}
}

ButIdentifier: Identifier = {
    <l:@L> <n:identifier> <r:@R> => Identifier{loc: Loc::Source(file_no, l, r), name: n.to_string()},
}

ButIdentifierOrError: Option<Identifier> = {
    ButIdentifier => Some(<>),
    ! => {
        parser_errors.push(<>);
        None
    }
}

PropertyDefinition: PropertyDefinition = {
    <l:@L> <annotations:AnnotationDefinition*> <name:ButIdentifierOrError> "-" ">" <e:(Expression)?> <r:@R> ";" => PropertyDefinition {
        loc: Loc::Source(file_no, l, r), name: name, value: e, annotations: annotations
    },
}

VariableDeclaration: VariableDeclaration = {
    <l:@L> <annotations:AnnotationDefinition*> <attrs:VariableAttribute*> <name:ButIdentifierOrError> ":" <ty:Type> <r:@R> => VariableDeclaration {
        loc: Loc::Source(file_no, l, r), ty: ty, storage: None, name: name, annotations: annotations
    },
}

VariableDefinition: Box<VariableDefinition> = {
    <l:@L> <annotations:AnnotationDefinition*> <attrs:VariableAttribute*> <name:ButIdentifierOrError> ":" <ty:Type> <e:("=" <Expression>)?> <r:@R> ";" => {
        Box::new(VariableDefinition{
            loc: Loc::Source(file_no, l, r), ty, attrs, name, initializer: e, annotations: annotations
        })
    },
}

FunctionCall: Expression = {
    <a:@L> <i:Identifier> "(" <v:Comma<Expression>> ")" <b:@R> => {
        Expression::FunctionCall(Loc::Source(file_no, a, b), i, v)
    },
}

Annotation: Annotation = {
    <l:@L> <n:number> <r:@R> => {
        Annotation::Number(Loc::Source(file_no, l, r), n)
    },
    <l:@L> <n:rational> <r:@R> => {
        Annotation::Rational(Loc::Source(file_no, l, r), n.0.to_string(), n.1)
    },
    <l:@L> <n:string> <r:@R> => {
        Annotation::String(StringLiteral{loc: Loc::Source(file_no, l, r), unicode: n.0, string: n.1.to_string()})
    },
    <l:@L> <id:ButIdentifierPath> <r:@R> => {
        Annotation::Identifier(Loc::Source(file_no, l, r), id)
    },
    <l:@L> <id:Identifier> "(" <v:CommaOne<Annotation>> ")" <r:@R> => {
        Annotation::Function{loc: Loc::Source(file_no, l, r), name: id, args: v}
    },
    <l:@L> <id:ButIdentifierPath> "=" <e:Expression> <r:@R> => {
        Annotation::Assign{loc: Loc::Source(file_no, l, r), name: id, value: e}
    },
}

AnnotationDefinition: AnnotationDefinition = {
    <l:@L> "#" "[" <args:CommaOne<Annotation>> "]" <r:@R> => {
        AnnotationDefinition{loc: Loc::Source(file_no, l, r), args: args, glob: false}
    },
}

GlobalAnnotationDefinition: AnnotationDefinition = {
    <l:@L> "#" "!" "[" <args:CommaOne<Annotation>> "]" <r:@R> => {
        AnnotationDefinition{loc: Loc::Source(file_no, l, r), args: args, glob: true}
    },
}

Visibility: Visibility = {
    <l:@L> "external" <r:@R> => Visibility::External(Some(Loc::Source(file_no, l, r))),
}

VariableAttribute: VariableAttribute = {
    Visibility => VariableAttribute::Visibility(<>),
    <l:@L> "const" <r:@R> => VariableAttribute::Constant(Loc::Source(file_no, l, r)),
    <l:@L> "let" <r:@R> => VariableAttribute::Readable(Loc::Source(file_no, l, r)),
    <l:@L> "mut" <r:@R> => VariableAttribute::Writable(Loc::Source(file_no, l, r)),
    <l:@L> "pio" <r:@R> => VariableAttribute::Portable(Loc::Source(file_no, l, r)),
}

StructDefinition: Box<StructDefinition> = {
    <l:@L> <annotations:AnnotationDefinition*> "struct" <name:ButIdentifierOrError> "{" <fields:(<VariableDeclaration> ";")*> "}" <r:@R> => {
        Box::new(StructDefinition{loc: Loc::Source(file_no, l, r), name, fields, annotations})
    }
}

TypeDefinition: Box<TypeDefinition> = {
    <l:@L> "type" <name:ButIdentifier> "=" <ty:Type> <r:@R> ";" => {
        Box::new(TypeDefinition{
            loc: Loc::Source(file_no, l, r), name, ty
        })
    },
}

BlockStatementOrSemiColon: Option<Statement> = {
    <@L> <@R> ";" => None,
    BlockStatement => Some(<>),
}

FunctionDefinition: Box<FunctionDefinition> = {
    <l:@L> <annotations:AnnotationDefinition*> "fn" <nl:@L> <name:ButIdentifierOrError> <nr:@R> <params:ParameterList>
    <return_type:(":" <Type>)?> <r:@R> <body:BlockStatementOrSemiColon> => {
        Box::new(FunctionDefinition{
            loc: Loc::Source(file_no, l, r),
            ty: FunctionTy::Function,
            name,
            name_loc: Loc::Source(file_no, nl, nr),
            params,
            annotations,
            return_type,
            body,
        })
    },
}


Type: Type = {
    <name:ButIdentifier> => Type::Alias(name),
    <l:@L> "[" <n:number> ":" <ty:Type> "]" <r:@R> => {
        Type::Array {
            loc: Loc::Source(file_no, l, r),
            element_count: n as u16,
            element_type: Box::new(ty)
        }
    }
}

Expression: Expression = {
    Precedence14
}

Precedence14: Expression = {
    <a:@L> <l:Precedence13> "=" <r:Precedence14> <b:@R> => Expression::Assign(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    <a:@L> <l:Precedence13> "|=" <r:Precedence14> <b:@R> => Expression::AssignOr(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    <a:@L> <l:Precedence13> "&=" <r:Precedence14> <b:@R> => Expression::AssignAnd(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    <a:@L> <l:Precedence13> "<<=" <r:Precedence14> <b:@R> => Expression::AssignShiftLeft(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    <a:@L> <l:Precedence13> ">>=" <r:Precedence14> <b:@R> => Expression::AssignShiftRight(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    <a:@L> <l:Precedence13> "+=" <r:Precedence14> <b:@R> => Expression::AssignAdd(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    <a:@L> <l:Precedence13> "-=" <r:Precedence14> <b:@R> => Expression::AssignSubtract(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    <a:@L> <l:Precedence13> "*=" <r:Precedence14> <b:@R> => Expression::AssignMultiply(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    <a:@L> <l:Precedence13> "/=" <r:Precedence14> <b:@R> => Expression::AssignDivide(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    <a:@L> <l:Precedence13> "%=" <r:Precedence14> <b:@R> => Expression::AssignModulo(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence13,
}

Precedence13: Expression = {
    <a:@L> <l:Precedence13> "||" <r:Precedence12> <b:@R> => Expression::Or(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence12,
}

Precedence12: Expression = {
    <a:@L> <l:Precedence12> "&&" <r:Precedence11> <b:@R> => Expression::And(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence11,
}

Precedence11: Expression = {
    <a:@L> <l:Precedence11> "==" <r:Precedence10> <b:@R> => Expression::Equal(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    <a:@L> <l:Precedence11> "!=" <r:Precedence10> <b:@R> => Expression::NotEqual(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence10,
}

Precedence10: Expression = {
    <a:@L> <l:Precedence10> "<" <r:Precedence9> <b:@R> => Expression::Less(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    <a:@L> <l:Precedence10> ">" <r:Precedence9> <b:@R> => Expression::More(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    <a:@L> <l:Precedence10> "<=" <r:Precedence9> <b:@R> => Expression::LessEqual(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    <a:@L> <l:Precedence10> ">=" <r:Precedence9> <b:@R> => Expression::MoreEqual(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence9,
}

Precedence9: Expression = {
    <a:@L> <l:Precedence9> "|" <r:Precedence7> <b:@R> => Expression::BitwiseOr(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence7,
}

Precedence7: Expression = {
    <a:@L> <l:Precedence7> "&" <r:Precedence6> <b:@R> => Expression::BitwiseAnd(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    <a:@L> <e:Precedence7> "as" <ty:Type> <b:@R> => Expression::Cast(Loc::Source(file_no, a, b), Box::new(e), ty),
    Precedence6,
}

Precedence6: Expression = {
    <a:@L> <l:Precedence6> "<<" <r:Precedence5> <b:@R> => Expression::ShiftLeft(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    <a:@L> <l:Precedence6> ">>" <r:Precedence5> <b:@R> => Expression::ShiftRight(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence5,
}

Precedence5: Expression = {
    <a:@L> <l:Precedence5> "+" <r:Precedence4> <b:@R> => Expression::Add(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    <a:@L> <l:Precedence5> "-" <r:Precedence4> <b:@R> => Expression::Subtract(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence4,
}

Precedence4: Expression = {
    <a:@L> <l:Precedence4> "*" <r:Precedence3> <b:@R> => Expression::Multiply(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    <a:@L> <l:Precedence4> "/" <r:Precedence3> <b:@R> => Expression::Divide(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    <a:@L> <l:Precedence4> "%" <r:Precedence3> <b:@R> => Expression::Modulo(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence3,
}

Precedence3: Expression = {
    <a:@L> <l:Precedence2> "**" <r:Precedence3> <b:@R> => Expression::Power(Loc::Source(file_no, a, b), Box::new(l), Box::new(r)),
    Precedence2,
}

Precedence2: Expression = {
    <a:@L> "!" <e:Precedence2> <b:@R> => Expression::Not(Loc::Source(file_no, a, b), Box::new(e)),
    <a:@L> "++" <e:Precedence2> <b:@R> => Expression::PreIncrement(Loc::Source(file_no, a, b), Box::new(e)),
    <a:@L> "--" <e:Precedence2> <b:@R> => Expression::PreDecrement(Loc::Source(file_no, a, b), Box::new(e)),
    <a:@L> "+" <e:Precedence2> <b:@R>  => Expression::UnaryPlus(Loc::Source(file_no, a, b), Box::new(e)),
    <a:@L> "-" <e:Precedence2> <b:@R> => Expression::Negate(Loc::Source(file_no, a, b), Box::new(e)),
    Precedence1
}

Precedence1: Expression = {
    <l:@L> <n:number> ":" <bit:number> <r:@R> => {
        Expression::AddressLiteral(Loc::Source(file_no, l, r), n, bit)
    },
    <l:@L> <n:number> <r:@R> => {
        Expression::NumberLiteral(Loc::Source(file_no, l, r), n)
    },
    <l:@L> <n:rational> <r:@R> => {
        Expression::RationalNumberLiteral(Loc::Source(file_no, l, r), n.0.to_string(), n.1)
    },
    <l:@L> <n:hexnumber> <r:@R> => {
        Expression::HexNumberLiteral(Loc::Source(file_no, l, r), n.to_owned(), None)
    },
    <l:@L> "{" <v:CommaOne<Expression>> "}" <r:@R> => {
        Expression::Initializer(Loc::Source(file_no, l, r), v)
    },
    Precedence0
}

Precedence0: Expression = {
   <Identifier> => Expression::Variable(<>),
   <FunctionCall> => <>,
   <l:@L> <a:ParameterList> <r:@R> => {
      if a.len() == 1 {
          if let Some(Parameter{ ty, storage: None, name: None, .. }) = &a[0].1 {
              // this means "(" Expression ")"
              return Expression::Parenthesis(ty.loc(), Box::new(ty.clone()));
          }
      }

      Expression::List(Loc::Source(file_no, l, r), a)
  },
  <a:@L> <e:Precedence0> "++" <b:@R> => Expression::PostIncrement(Loc::Source(file_no, a, b), Box::new(e)),
  <a:@L> <e:Precedence0> "--" <b:@R> => Expression::PostDecrement(Loc::Source(file_no, a, b), Box::new(e)),
  <a:@L> <e:Precedence0> "." <i:Identifier> <b:@R> => Expression::MemberAccess(Loc::Source(file_no, a, b), Box::new(e), i),
  <a:@L> <i:Identifier> "[" <n:number> "]" <b:@R> => Expression::ArraySubscript(Loc::Source(file_no, a, b), i, n),
  <a:@L> <i:Identifier> "[" <l:number?> ":" <r:number?> "]" <b:@R> => Expression::ArraySlice(Loc::Source(file_no, a, b), i, l, r),
  LiteralExpression,
}

Parameter: Parameter = {
    <l:@L> <annotation:ParameterAnnotation?> <name:ButIdentifier> ":" <ty:Precedence9> <r:@R> => {
        let loc = Loc::Source(file_no, l, r);
        Parameter{loc, annotation, ty, storage: None, name: Some(name)}
    },
    <l:@L> <annotation:ParameterAnnotation?> <ty:Precedence9> <r:@R> => {
        let loc = Loc::Source(file_no, l, r);
        Parameter{loc, annotation, ty: ty, storage: None, name: None}
    }
}

OptParameter: (Loc, Option<Parameter>) = {
    <l:@L> <p:Parameter?> <r:@R> => (Loc::Source(file_no, l, r), p),
}

ParameterList: Vec<(Loc, Option<Parameter>)> = {
    "(" ")" => Vec::new(),
    "(" <l:@L> <p:Parameter> <r:@R> ")" => vec!((Loc::Source(file_no, l, r), Some(p))),
    "(" <CommaTwo<OptParameter>> ")" => <>,
    "(" <false_token:!> ")"=> {
        parser_errors.push(<>);
        Vec::new()
    }
}

ParameterAnnotation: Annotation = {
}

LiteralExpression: Expression = {
    <a:@L> "true" <b:@R> => Expression::BoolLiteral(Loc::Source(file_no, a, b), true),
    <a:@L> "false" <b:@R> => Expression::BoolLiteral(Loc::Source(file_no, a, b), false),
    <StringLiteral+> => Expression::StringLiteral(<>),
    <HexLiteral+> => Expression::HexLiteral(<>),
}

BlockStatement: Statement = {
    <l:@L> "{" <statements:Statement*> "}" <r:@R> => {
        Statement::Block { loc: Loc::Source(file_no, l, r), unchecked: false, statements }
    },
}

OpenStatement: Statement = {
    <l:@L> "if" "(" <cond:Expression> ")" <body:Statement> <r:@R> => {
        Statement::If(Loc::Source(file_no, l, r), cond, Box::new(body), None)
    },
    <l:@L> "if" "(" <cond:Expression> ")" <body:ClosedStatement> "else" <o:OpenStatement> <r:@R> => {
        Statement::If(Loc::Source(file_no, l, r), cond, Box::new(body), Some(Box::new(o)))
    },
    <l:@L> "for" "(" <b:SimpleStatement?> ";" <c:Expression?> ";" <n:Expression?> ")" <block:OpenStatement> <r:@R> => {
        Statement::For(Loc::Source(file_no, l, r), b.map(Box::new), c.map(Box::new), n.map(Box::new), Some(Box::new(block)))
    },
    <l:@L> "while" "(" <e:Expression> ")" <b:OpenStatement> <r:@R> => {
        Statement::While(Loc::Source(file_no, l, r), e, Box::new(b))
    }
}

ClosedStatement: Statement = {
    NonIfStatement,
    <l:@L> "if" "(" <cond:Expression> ")" <body:ClosedStatement> "else" <o:ClosedStatement> <r:@R> => {
        Statement::If(Loc::Source(file_no, l, r), cond, Box::new(body), Some(Box::new(o)))
    },
    <l:@L> "while" "(" <e:Expression> ")" <b:ClosedStatement> <r:@R> => {
        Statement::While(Loc::Source(file_no, l, r), e, Box::new(b))
    },
    <l:@L> "for" "(" <b:SimpleStatement?> ";" <c:Expression?> ";" <n:Expression?> ")" <block:ClosedStatement> <r:@R> => {
        Statement::For(Loc::Source(file_no, l, r), b.map(Box::new), c.map(Box::new), n.map(Box::new), Some(Box::new(block)))
    },
    <l:@L> "for" "(" <b:SimpleStatement?> ";" <c:Expression?> ";" <n:Expression?> ")" <r:@R> ";" => {
        Statement::For(Loc::Source(file_no, l, r), b.map(Box::new), c.map(Box::new), n.map(Box::new), None)
    }
}

Statement: Statement = {
    OpenStatement,
    ClosedStatement,
    <l:@L> <false_token:!> <r:@R> => {
        parser_errors.push(false_token);
        Statement::Error(Loc::Source(file_no, l, r))
    },
}

SimpleStatement: Statement = {
    <l:@L> <v:VariableDeclaration> <e:("=" <Expression>)?> <r:@R> => {
        Statement::VariableDefinition(Loc::Source(file_no, l, r), v, e)
    },
    <l:@L> <e:Expression> <r:@R> => {
        Statement::Expression(Loc::Source(file_no, l, r), e)
    }
}

NonIfStatement: Statement = {
    BlockStatement => <>,
    <l:@L> "assembly" <dialect:StringLiteral?> <block:BlockStatement> <r:@R> => {
        Statement::Assembly {
            loc: Loc::Source(file_no, l, r),
            dialect: dialect.map(|dialect| dialect.to_owned()),
            flags: None,
            block: Box::new(block)
        }
    },
    <l:@L> "formula" <dialect:StringLiteral?> <block:FormulaBlock> <r:@R> => {
        Statement::Formula {
            loc: Loc::Source(file_no, l, r),
            dialect: dialect.map(|dialect| dialect.to_owned()),
            flags: None,
            block: Box::new(block)
        }
    },
    <SimpleStatement> ";" => <>,
    <l:@L> "do" <b:Statement> "while" "(" <e:Expression> ")" <r:@R> ";" => {
        Statement::DoWhile(Loc::Source(file_no, l, r), Box::new(b), e)
    },
    <l:@L> "continue" <r:@R> ";" => {
        Statement::Continue(Loc::Source(file_no, l, r))
    },
    <l:@L> "break" <r:@R> ";" => {
        Statement::Break(Loc::Source(file_no, l, r))
    },
    <l:@L> "return" <r:@R> ";" => {
        Statement::Return(Loc::Source(file_no, l, r), None)
    },
    <l:@L> "return" <e:Expression> <r:@R> ";" => {
        Statement::Return(Loc::Source(file_no, l, r), Some(e))
    },
}


StringLiteral: StringLiteral = {
    <l:@L> <s:string> <r:@R> => {
        StringLiteral{ loc: Loc::Source(file_no, l, r), unicode: s.0, string: s.1.to_string() }
    }
}

HexLiteral: HexLiteral = {
    <l:@L> <s:hexstring> <r:@R> => {
        let v = s.to_string();
        let hex_len = v.len() - 5;

        HexLiteral{ loc: Loc::Source(file_no, l, r), hex: v.chars().skip(4).filter(|c| *c != '_' && *c != '"' && *c != '\'').collect() }
    }
}

FormulaIdentifier: Identifier = {
    <l:@L> <n:identifier> <r:@R> => Identifier{loc: Loc::Source(file_no, l, r), name: n.to_string()},
    <l:@L> "external" <r:@L> => Identifier{loc: Loc::Source(file_no, l, r), name: "external".to_string()},
    <l:@L> "import" <r:@L> => Identifier{loc: Loc::Source(file_no, l, r), name: "import".to_string()},
    <l:@L> "is" <r:@L> => Identifier{loc: Loc::Source(file_no, l, r), name: "is".to_string()},
}

FormulaStatement: FormulaStatement = {
    <FormulaBlock> => FormulaStatement::Block(<>),
    <FormulaFunctionCall> => FormulaStatement::FunctionCall(Box::new(<>)),
    <l:@L><false_token:!><r:@R> => {
        parser_errors.push(false_token);
        FormulaStatement::Error(Loc::Source(file_no, l ,r))
    },
}

FormulaBlock: FormulaBlock = {
    <l:@L> "{" <statements:FormulaStatement*> "}" <r:@R> => FormulaBlock{loc: Loc::Source(file_no, l, r), statements},
}

FormulaLiteral: FormulaExpression = {
    <a:@L> "true" <t_type:(":" <FormulaIdentifier>)?> <b:@R> => FormulaExpression::BoolLiteral(Loc::Source(file_no, a, b), true, t_type),
    <a:@L> "false" <t_type:(":" <FormulaIdentifier>)?> <b:@R> => FormulaExpression::BoolLiteral(Loc::Source(file_no, a, b), false, t_type),
    <l:@L> <n:number> <t_type:(":" <FormulaIdentifier>)?> <r:@R> => {
        FormulaExpression::NumberLiteral(Loc::Source(file_no, l, r), n, t_type)
    },
    <l:@L> <n:hexnumber> <t_type:(":" <FormulaIdentifier>)?> <r:@R> => {
        FormulaExpression::HexNumberLiteral(Loc::Source(file_no, l, r), n.to_owned(), t_type)
    },
    <l:@L> <s:hexstring> <t_type:(":" <FormulaIdentifier>)?> <r:@R> => {
        let v = s.to_string();
        let hex_len = v.len() - 5;
        FormulaExpression::HexStringLiteral(HexLiteral{ loc: Loc::Source(file_no, l, r), hex: v.chars().skip(4).filter(|c| *c != '_' && *c != '"' && *c != '\'').collect()},
        t_type)
    },
    <str:StringLiteral> <t_type:(":" <FormulaIdentifier>)?> => {
        FormulaExpression::StringLiteral(str, t_type)
    },
}

FormulaFunctionCall: FormulaFunctionCall = {
    <l:@L> <id:FormulaIdentifier> "(" <arguments:Comma<FormulaExpression>> ")" <r:@R> => {
        FormulaFunctionCall{loc: Loc::Source(file_no, l, r), id, arguments}
    }
}

FormulaPath: FormulaExpression = {
    <FormulaIdentifier> => FormulaExpression::Variable(<>),
    <l:@L> <array:FormulaPath> "." <member:FormulaIdentifier> <r:@R> => {
        FormulaExpression::SuffixAccess(Loc::Source(file_no, l, r), Box::new(array), member)
    },
}

FormulaExpression: FormulaExpression = {
    <FormulaPath> => <>,
    <FormulaFunctionCall> => FormulaExpression::FunctionCall(Box::new(<>)),
    <FormulaLiteral> => <>,
}

Comma<T>: Vec<T> = {
    => Vec::new(),
    CommaOne<T> => <>,
};

CommaOne<T>: Vec<T> = {
    <e:T> <v:("," <T>)*> => {
        let mut v = v;
        v.insert(0, e);
        v
    }
};

CommaTwo<T>: Vec<T> = {
    <e:T> <v:("," <T>)+> => {
        let mut v = v;
        v.insert(0, e);
        v
    }
};

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token<'input> {
        identifier => Token::Identifier(<&'input str>),
        string => Token::StringLiteral(<bool>, <&'input str>),
        hexstring => Token::HexLiteral(<&'input str>),
        number => Token::Number(<i64>),
        rational => Token::RationalNumber(<&'input str>, <bool>),
        hexnumber => Token::HexNumber(<&'input str>),
        "->" => Token::PeirceArrow,
        "#" => Token::Sharp,
        ";" => Token::Semicolon,
        ":" => Token::Colon,
        "{" => Token::OpenCurlyBrace,
        "}" => Token::CloseCurlyBrace,
        "(" => Token::OpenParenthesis,
        ")" => Token::CloseParenthesis,
        "=" => Token::Assign,
        "==" => Token::Equal,
        "|=" => Token::BitwiseOrAssign,
        "&=" => Token::BitwiseAndAssign,
        "<<=" => Token::ShiftLeftAssign,
        ">>=" => Token::ShiftRightAssign,
        "+=" => Token::AddAssign,
        "-=" => Token::SubtractAssign,
        "*=" => Token::MulAssign,
        "/=" => Token::DivideAssign,
        "%=" => Token::ModuloAssign,
        "||" => Token::Or,
        "&&" => Token::And,
        "!=" => Token::NotEqual,
        "<" => Token::Less,
        "<=" => Token::LessEqual,
        ">" => Token::More,
        ">=" => Token::MoreEqual,
        "|" => Token::BitwiseOr,
        "&" => Token::BitwiseAnd,
        "<<" => Token::ShiftLeft,
        ">>" => Token::ShiftRight,
        "+" => Token::Add,
        "-" => Token::Subtract,
        "*" => Token::Mul,
        "/" => Token::Divide,
        "%" => Token::Modulo,
        "**" => Token::Power,
        "!" => Token::Not,
        "++" => Token::Increment,
        "--" => Token::Decrement,
        "[" => Token::OpenBracket,
        "]" => Token::CloseBracket,
        "." => Token::Member,
        "," => Token::Comma,
        "struct" => Token::Struct,
        "import" => Token::Import,
        "interface" => Token::Interface,
        "library" => Token::Library,
        "enum" => Token::Enum,
        "type" => Token::Type,
        "const" => Token::Constant,
        "let" => Token::Readable,
        "mut" => Token::Writable,
        "pio" => Token::Portable,
        "external" => Token::External,
        "true" => Token::True,
        "false" => Token::False,
        "fn" => Token::Function,
        "return" => Token::Return,
        "if" => Token::If,
        "for" => Token::For,
        "while" => Token::While,
        "else" => Token::Else,
        "do" => Token::Do,
        "continue" => Token::Continue,
        "break" => Token::Break,
        "emit" => Token::Emit,
        "as" => Token::As,
        "is" => Token::Is,
        "assembly" => Token::Assembly,
        "formula" => Token::Formula,
    }
}
